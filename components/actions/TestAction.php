<?php
/**
 * Created by PhpStorm.
 * User: aponirovskiy
 * Date: 18.02.2016
 * Time: 17:26
 */

namespace app\components\actions;


use app\components\behaviors\TestBehavior;
use app\components\custom\MyObject;
use app\components\events\TestEvent;
use app\components\filters\ActionTimeFilter;
use app\migrations\BaseMigration;
use yii\base\Action;
use yii\base\Widget;
use yii\db\Connection;
use yii\db\Schema;
use yii\filters\ContentNegotiator;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;
use yii\web\Response;

/**
 * Class TestAction
 * @package app\components\actions
 *
 * @method void missedMethod() - TestBehavior method
 */
class TestAction extends Action{

    const TEST_EVENT = 'testEvent';

    protected $start_time;

    protected $end_time;

    protected $spent_time;

    protected $my_object;

    public function __construct($id, $controller, MyObject $my_object, $config = [])
    {
        $this->my_object = $my_object;
        parent::__construct($id, $controller, $config);
    }


    public function behaviors()
    {
        //return parent::behaviors(); // TODO: Change the autogenerated stub

        return ArrayHelper::merge(
            [
                'content-neg' => [
                    'class' => ContentNegotiator::className(),
                    'formats' => [
                        'application/json' => Response::FORMAT_JSON,
                        'application/xml' => Response::FORMAT_XML,
                    ],
                    'languages' => [
                        'en-US',
                        'de',
                    ],
                ],
                'event-listener' => [
                    'class' => TestBehavior::className()
                ],
                /*'action-time' =>[
                    'class' => ActionTimeFilter::className()
                ]*/
            ],
            parent::behaviors()
        );
    }


    public function run()
    {
        //var_dump($this->getBehaviors());
        $e = new TestEvent();
        $e->setAdditional(array('my custom info!'));
        $this->trigger(self::TEST_EVENT, $e);

        v(basename('C:\OpenServer\domains\basic.dev\web\robots.txt'));
        $db = \Yii::$app->db;
        $schecma = $db->getSchema();

        //v(in_array( $db->getSchema()->getRawTableName('{{%tttt}}'),$db->getSchema()->getTableNames()));

        /*v(\Yii::$app->db->createCommand('SELECT * FROM users '));

        v($this->my_object);

        v($this->my_object->getComponent());

        v(\Yii::$container->get(get_class($this->my_object)));

        v(\Yii::$container->get(get_class($this->my_object->getComponent())));*/

        //$this->missedMethod();
    }

    public function dosmth(array $arr){
        p($arr);
    }

    /*protected function beforeRun()
    {
        $this->start_time = microtime(true);
        return true;
    }

    protected function afterRun()
    {
        $this->end_time = microtime(true);

        echo "\n\n\n".$this->spent_time.'<h1>asdasdasdasd</h1>';
    }*/

}